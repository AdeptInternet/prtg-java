<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<jaxb:bindings
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xjc="http://java.sun.com/xml/ns/jaxb/xjc"
    xmlns:jaxb="http://java.sun.com/xml/ns/jaxb"
    xmlns:basic="http://jaxb2-commons.dev.java.net/basic"
    xmlns:ci="http://jaxb.dev.java.net/plugin/code-injector"
    xmlns:copyable="http://jaxb2-commons.dev.java.net/basic/copyable"
    xmlns:equals="http://jaxb2-commons.dev.java.net/basic/equals"
    xmlns:hashCode="http://jaxb2-commons.dev.java.net/basic/hashCode"
    xmlns:mergeable="http://jaxb2-commons.dev.java.net/basic/mergeable"
    xmlns:toString="http://jaxb2-commons.dev.java.net/basic/toString"
    xmlns:inheritance="http://jaxb2-commons.dev.java.net/basic/inheritance"
    xmlns:annox="http://annox.dev.java.net"
    xsi:schemaLocation="http://java.sun.com/xml/ns/jaxb ../jaxb/bindingschema_2_0.xsd"
    jaxb:extensionBindingPrefixes="basic xjc ci annox"
    version="2.1"
>
 
    <jaxb:globalBindings generateIsSetMethod="true" >
        <jaxb:serializable uid="201401010001"/>
    </jaxb:globalBindings>

    <jaxb:bindings schemaLocation="prtg-1.0.xsd" >
        <jaxb:schemaBindings >
            <jaxb:package name="org.adeptnet.prtg.xml">
            </jaxb:package>
        </jaxb:schemaBindings>
    </jaxb:bindings>

    <jaxb:bindings schemaLocation="prtg-1.0.xsd" node="//xs:complexType[@name='PrtgType']" >
        <annox:annotate>
            <annox:annotate annox:class="javax.xml.bind.annotation.XmlRootElement" name="prtg" namespace="urn:ietf:params:xml:ns:prtg-1.0"/>
        </annox:annotate>
        <jaxb:class name="Prtg" />
        <jaxb:bindings node=".//xs:element[@name='text']" >
            <jaxb:property name="errorText" />
        </jaxb:bindings>
    </jaxb:bindings>

    <jaxb:bindings schemaLocation="prtg-1.0.xsd" node="//xs:simpleType[@name='BooleanType']" >
        <jaxb:typesafeEnumClass>
            <jaxb:javadoc><![CDATA[
CHECKSTYLE:OFF
]]>
            </jaxb:javadoc>
        </jaxb:typesafeEnumClass>
        <jaxb:bindings node=".//xs:restriction/xs:enumeration[@value='0']">
            <jaxb:typesafeEnumMember name="FALSE"/>
        </jaxb:bindings>
        <jaxb:bindings node=".//xs:restriction/xs:enumeration[@value='1']">
            <jaxb:typesafeEnumMember name="TRUE"/>
        </jaxb:bindings>
    </jaxb:bindings>

    <jaxb:bindings schemaLocation="prtg-1.0.xsd" node="//xs:simpleType[@name='DecimalModeType']" >
        <jaxb:bindings node=".//xs:restriction/xs:enumeration[@value='Auto']">
            <jaxb:typesafeEnumMember name="AUTO"/>
        </jaxb:bindings>
        <jaxb:bindings node=".//xs:restriction/xs:enumeration[@value='All']">
            <jaxb:typesafeEnumMember name="ALL"/>
        </jaxb:bindings>
        <jaxb:bindings node=".//xs:restriction/xs:enumeration[@value='0']">
            <jaxb:typesafeEnumMember name="CUSTOM_0"/>
        </jaxb:bindings>
        <jaxb:bindings node=".//xs:restriction/xs:enumeration[@value='1']">
            <jaxb:typesafeEnumMember name="CUSTOM_1"/>
        </jaxb:bindings>
        <jaxb:bindings node=".//xs:restriction/xs:enumeration[@value='2']">
            <jaxb:typesafeEnumMember name="CUSTOM_2"/>
        </jaxb:bindings>
        <jaxb:bindings node=".//xs:restriction/xs:enumeration[@value='3']">
            <jaxb:typesafeEnumMember name="CUSTOM_3"/>
        </jaxb:bindings>
        <jaxb:bindings node=".//xs:restriction/xs:enumeration[@value='4']">
            <jaxb:typesafeEnumMember name="CUSTOM_4"/>
        </jaxb:bindings>
        <jaxb:bindings node=".//xs:restriction/xs:enumeration[@value='5']">
            <jaxb:typesafeEnumMember name="CUSTOM_5"/>
        </jaxb:bindings>
        <jaxb:bindings node=".//xs:restriction/xs:enumeration[@value='6']">
            <jaxb:typesafeEnumMember name="CUSTOM_6"/>
        </jaxb:bindings>
        <jaxb:bindings node=".//xs:restriction/xs:enumeration[@value='7']">
            <jaxb:typesafeEnumMember name="CUSTOM_7"/>
        </jaxb:bindings>
        <jaxb:bindings node=".//xs:restriction/xs:enumeration[@value='8']">
            <jaxb:typesafeEnumMember name="CUSTOM_8"/>
        </jaxb:bindings>
        <jaxb:bindings node=".//xs:restriction/xs:enumeration[@value='9']">
            <jaxb:typesafeEnumMember name="CUSTOM_9"/>
        </jaxb:bindings>
    </jaxb:bindings>

    <jaxb:bindings schemaLocation="prtg-1.0.xsd" node="//xs:complexType[@name='ChannelType']" >
        <ci:code><![CDATA[
    public final void setValue(final Object value) {
        if ((value instanceof Integer)
                || (value instanceof Long)
                || (value instanceof Short)
                || (value instanceof Byte)) {
            this.setFloat(BooleanType.FALSE);
        } else if ((value instanceof Float)
                || (value instanceof Double)) {
            this.setFloat(BooleanType.TRUE);
        }
        this.value = value.toString();
    }

    public ChannelType withValue(final Object value) {
        setValue(value);
        return this;
    }

    public ChannelType() {
    }

    public ChannelType(final String name, final UnitType unit, final Object value) {
        this();
        this.name = name;
        this.unit = unit;
        this.setValue(value);
    }
            
    @SuppressWarnings("unchecked")
    public <F extends ChannelType> F upCast( Class<F> clazz) {
        if (clazz.isInstance(this)) {
            return (F)this;
        } else {
            throw new IllegalArgumentException("Cannot cast instance :"+this.getClass().getName()+" to "+clazz.getName());
        }
    }            

    @SuppressWarnings("unchecked")
    public <F extends ChannelType> F downCast( Class<F> clazz) {
        try {
            final F result = clazz.newInstance();
            this.copyTo(result);
            return result;
        } catch (InstantiationException | IllegalAccessException ex) {
            throw new IllegalArgumentException("Cannot create instance :"+this.getClass().getName()+" to "+clazz.getName(),ex);
        }
    }            
    
    public ChannelType downCast() {
            return this.downCast(ChannelType.class);
    }            
            ]]></ci:code>
        <jaxb:bindings node=".//xs:element[@name='channel']" >
            <jaxb:property name="name">
                <jaxb:javadoc><![CDATA[Name of the channel as displayed in user interfaces. This parameter is required and must be unique for the sensor.]]></jaxb:javadoc>
            </jaxb:property>
        </jaxb:bindings>
        <jaxb:bindings node=".//xs:element[@name='value']" >
            <jaxb:property>
                <jaxb:javadoc><![CDATA[The value as integer or float. Please make sure the &lt;Float&gt; setting matches the kind of value provided. Otherwise PRTG will show 0 values.]]></jaxb:javadoc>
            </jaxb:property>
        </jaxb:bindings>
        <jaxb:bindings node=".//xs:element[@name='unit']" >
            <jaxb:property>
                <jaxb:javadoc><![CDATA[The unit of the value. Default is Custom. Useful for PRTG to be able to convert volumes and times.]]></jaxb:javadoc>
            </jaxb:property>
        </jaxb:bindings>
        <jaxb:bindings node=".//xs:element[@name='customunit']" >
            <jaxb:property name="customUnit">
                <jaxb:javadoc><![CDATA[If Custom is used as unit this is the text displayed behind the value.]]></jaxb:javadoc>
            </jaxb:property>
        </jaxb:bindings>
        <jaxb:bindings node=".//xs:element[@name='speedsize']" >
            <jaxb:property name="speedSize">
                <jaxb:javadoc><![CDATA[Size used for the display value. E.g. if you have a value of 50000 and use Kilo as size the display is 50 kilo #. Default is One (value used as returned). For the Bytes and Speed units this is overridden by the setting in the user interface.]]></jaxb:javadoc>
            </jaxb:property>
        </jaxb:bindings>
        <jaxb:bindings node=".//xs:element[@name='volumesize']" >
            <jaxb:property name="volumeSize">
                <jaxb:javadoc><![CDATA[Size used for the display value. E.g. if you have a value of 50000 and use Kilo as size the display is 50 kilo #. Default is One (value used as returned). For the Bytes and Speed units this is overridden by the setting in the user interface.]]></jaxb:javadoc>
            </jaxb:property>
        </jaxb:bindings>
        <jaxb:bindings node=".//xs:element[@name='speedtime']" >
            <jaxb:property name="speedTime">
                <jaxb:javadoc><![CDATA[See above, used when displaying the speed. Default is Second.]]></jaxb:javadoc>
            </jaxb:property>
        </jaxb:bindings>
        <jaxb:bindings node=".//xs:element[@name='mode']" >
            <jaxb:property>
                <jaxb:javadoc><![CDATA[Selects if the value is a absolut value or counter. Default is Absolute.]]></jaxb:javadoc>
            </jaxb:property>
        </jaxb:bindings>
        <jaxb:bindings node=".//xs:element[@name='float']" >
            <jaxb:property>
                <jaxb:javadoc><![CDATA[Define if the value is a float. Default is 0 (no). If set to 1 (yes), use a dot as decimal seperator in values. Note: Define decimal places with the &lt;DecimalMode&gt; element.]]></jaxb:javadoc>
            </jaxb:property>
        </jaxb:bindings>
        <jaxb:bindings node=".//xs:element[@name='decimalmode']" >
            <jaxb:property name="decimalMode">
                <jaxb:javadoc><![CDATA[Init value for the Decimal Places option. If 0 is used in the &lt;Float&gt; element (i.e. use integer), the default is Auto; otherwise (i.e. for float) default is All. Note: In the sensor's Channels tab, you can change this initial setting later.]]></jaxb:javadoc>
            </jaxb:property>
        </jaxb:bindings>
        <jaxb:bindings node=".//xs:element[@name='warning']" >
            <jaxb:property>
                <jaxb:javadoc><![CDATA[If enabled for at least one channel, the entire sensor is set to warning status. Default is 0 (no).]]></jaxb:javadoc>
            </jaxb:property>
        </jaxb:bindings>
        <jaxb:bindings node=".//xs:element[@name='showchart']" >
            <jaxb:property name="showChart">
                <jaxb:javadoc><![CDATA[Init value for the Show in Chart option. Default is 1 (yes). Note: The values defined with this element will be considered only on the first sensor scan, when the channel is newly created; they are ignored on all further sensor scans (and may be omitted). In the sensor's Channels tab, you can change this initial setting later.]]></jaxb:javadoc>
            </jaxb:property>
        </jaxb:bindings>
        <jaxb:bindings node=".//xs:element[@name='showtable']" >
            <jaxb:property>
                <jaxb:javadoc><![CDATA[Init value for the Show in Table option. Default is 1 (yes). Note: The values defined with this element will be considered only on the first sensor scan, when the channel is newly created; they are ignored on all further sensor scans (and may be omitted). In the sensor's Channels tab, you can change this initial setting later.]]></jaxb:javadoc>
            </jaxb:property>
        </jaxb:bindings>
        <jaxb:bindings node=".//xs:element[@name='limitmaxerror']" >
            <jaxb:property name="limitMaxError">
                <jaxb:javadoc><![CDATA[Define an upper error limit for the channel. If enabled, the sensor will be set to a "Down" status if this value is overrun and the LimitMode is activated. Note: Please provide the limit value in the unit of the base data type, just as used in the &lt;Value&gt; element of this section. While a sensor shows a "Down" status triggered by a limit, it will still receive data in its channels. The values defined with this element will be considered only on the first sensor scan, when the channel is newly created; they are ignored on all further sensor scans (and may be omitted). In the sensor's Channels tab, you can change this initial setting later.]]></jaxb:javadoc>
            </jaxb:property>
        </jaxb:bindings>
        <jaxb:bindings node=".//xs:element[@name='limitmaxwarning']" >
            <jaxb:property name="limitMaxWarning">
                <jaxb:javadoc><![CDATA[Define an upper warning limit for the channel. If enabled, the sensor will be set to a "Warning" status if this value is overrun and the LimitMode is activated. Note: Please provide the limit value in the unit of the base data type, just as used in the &lt;Value&gt; element of this section. The values defined with this element will be considered only on the first sensor scan, when the channel is newly created; they are ignored on all further sensor scans (and may be omitted). In the sensor's Channels tab, you can change this initial setting later.]]></jaxb:javadoc>
            </jaxb:property>
        </jaxb:bindings>
        <jaxb:bindings node=".//xs:element[@name='limitminwarning']" >
            <jaxb:property name="limitMinWarning">
                <jaxb:javadoc><![CDATA[Define a lower warning limit for the channel. If enabled, the sensor will be set to a "Warning" status if this value is undercut and the LimitMode is activated. Note: Please provide the limit value in the unit of the base data type, just as used in the &lt;Value&gt; element of this section. The values defined with this element will be considered only on the first sensor scan, when the channel is newly created; they are ignored on all further sensor scans (and may be omitted). In the sensor's Channels tab, you can change this initial setting later.]]></jaxb:javadoc>
            </jaxb:property>
        </jaxb:bindings>
        <jaxb:bindings node=".//xs:element[@name='limitminerror']" >
            <jaxb:property name="limitMinError">
                <jaxb:javadoc><![CDATA[Define a lower error limit for the channel. If enabled, the sensor will be set to a "Down" status if this value is undercut and the LimitMode is activated. Note: Please provide the limit value in the unit of the base data type, just as used in the &lt;Value&gt; element of this section. While a sensor shows a "Down" status triggered by a limit, it will still receive data in its channels. The values defined with this element will be considered only on the first sensor scan, when the channel is newly created; they are ignored on all further sensor scans (and may be omitted). In the sensor's Channels tab, you can change this initial setting later.]]></jaxb:javadoc>
            </jaxb:property>
        </jaxb:bindings>
        <jaxb:bindings node=".//xs:element[@name='limiterrormsg']" >
            <jaxb:property name="limitErrorMessage">
                <jaxb:javadoc><![CDATA[Define an additional message. It will be added to the sensor's message when entering a "Down" status that is triggered by a limit. Note: The values defined with this element will be considered only on the first sensor scan, when the channel is newly created; they are ignored on all further sensor scans (and may be omitted). In the sensor's Channels tab, you can change this initial setting later.]]></jaxb:javadoc>
            </jaxb:property>
        </jaxb:bindings>
        <jaxb:bindings node=".//xs:element[@name='limitwarningmsg']" >
            <jaxb:property name="limitWarningMessage">
                <jaxb:javadoc><![CDATA[Define an additional message. It will be added to the sensor's message when entering a "Warning" status that is triggered by a limit. Note: The values defined with this element will be considered only on the first sensor scan, when the channel is newly created; they are ignored on all further sensor scans (and may be omitted). In the sensor's Channels tab, you can change this initial setting later.]]></jaxb:javadoc>
            </jaxb:property>
        </jaxb:bindings>
        <jaxb:bindings node=".//xs:element[@name='limitmode']" >
            <jaxb:property name="limitMode">
                <jaxb:javadoc><![CDATA[Define if the limit settings defined above will be active. Default is 0 (no; limits inactive). If 0 is used the limits will be written to the sensor channel settings as predefined values, but limits will be disabled. Note: This setting will be considered only on the first sensor scan, when the channel is newly created; it is ignored on all further sensor scans (and may be omitted). In the sensor's Channels tab, you can change this initial setting later.]]></jaxb:javadoc>
            </jaxb:property>
        </jaxb:bindings>
        <jaxb:bindings node=".//xs:element[@name='valuelookup']" >
            <jaxb:property name="valueLookup">
                <jaxb:javadoc><![CDATA[Define if you want to use a lookup file (e.g. to view integer values as status texts). Please enter the ID of the lookup file you want to use, or omit this element to not use lookups. Note: This setting will be considered only on the first sensor scan, when the channel is newly created; it is ignored on all further sensor scans (and may be omitted). In the sensor's Channels tab, you can change this initial setting later.]]></jaxb:javadoc>
            </jaxb:property>
        </jaxb:bindings>
    </jaxb:bindings>

</jaxb:bindings>
